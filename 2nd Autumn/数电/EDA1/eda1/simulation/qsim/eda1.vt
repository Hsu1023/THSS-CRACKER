// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2021 15:22:58"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    eda1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module eda1_vlg_sample_tst(
	a,
	b,
	clk,
	operator,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input  clk;
input [1:0] operator;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or clk or operator)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module eda1_vlg_check_tst (
	generalans,
	segout,
	signout,
	wordout,
	sampler_rx
);
input [7:0] generalans;
input [5:0] segout;
input  signout;
input [6:0] wordout;
input sampler_rx;

reg [7:0] generalans_expected;
reg [5:0] segout_expected;
reg  signout_expected;
reg [6:0] wordout_expected;

reg [7:0] generalans_prev;
reg [5:0] segout_prev;
reg  signout_prev;
reg [6:0] wordout_prev;

reg [7:0] generalans_expected_prev;
reg  signout_expected_prev;

reg [7:0] last_generalans_exp;
reg  last_signout_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	generalans_prev = generalans;
	segout_prev = segout;
	signout_prev = signout;
	wordout_prev = wordout;
end

// update expected /o prevs

always @(trigger)
begin
	generalans_expected_prev = generalans_expected;
	signout_expected_prev = signout_expected;
end



// expected signout
initial
begin
	signout_expected = 1'bX;
end 

// expected generalans[7]
initial
begin
	generalans_expected[7] = 1'bX;
end 

// expected generalans[6]
initial
begin
	generalans_expected[6] = 1'bX;
end 

// expected generalans[5]
initial
begin
	generalans_expected[5] = 1'bX;
end 

// expected generalans[4]
initial
begin
	generalans_expected[4] = 1'bX;
end 

// expected generalans[3]
initial
begin
	generalans_expected[3] = 1'bX;
end 

// expected generalans[2]
initial
begin
	generalans_expected[2] = 1'bX;
end 

// expected generalans[1]
initial
begin
	generalans_expected[1] = 1'bX;
end 

// expected generalans[0]
initial
begin
	generalans_expected[0] = 1'bX;
end 
// generate trigger
always @(generalans_expected or generalans or segout_expected or segout or signout_expected or signout or wordout_expected or wordout)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected generalans = %b | expected segout = %b | expected signout = %b | expected wordout = %b | ",generalans_expected_prev,segout_expected_prev,signout_expected_prev,wordout_expected_prev);
	$display("| real generalans = %b | real segout = %b | real signout = %b | real wordout = %b | ",generalans_prev,segout_prev,signout_prev,wordout_prev);
`endif
	if (
		( generalans_expected_prev[0] !== 1'bx ) && ( generalans_prev[0] !== generalans_expected_prev[0] )
		&& ((generalans_expected_prev[0] !== last_generalans_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalans[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalans_expected_prev);
		$display ("     Real value = %b", generalans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_generalans_exp[0] = generalans_expected_prev[0];
	end
	if (
		( generalans_expected_prev[1] !== 1'bx ) && ( generalans_prev[1] !== generalans_expected_prev[1] )
		&& ((generalans_expected_prev[1] !== last_generalans_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalans[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalans_expected_prev);
		$display ("     Real value = %b", generalans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_generalans_exp[1] = generalans_expected_prev[1];
	end
	if (
		( generalans_expected_prev[2] !== 1'bx ) && ( generalans_prev[2] !== generalans_expected_prev[2] )
		&& ((generalans_expected_prev[2] !== last_generalans_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalans[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalans_expected_prev);
		$display ("     Real value = %b", generalans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_generalans_exp[2] = generalans_expected_prev[2];
	end
	if (
		( generalans_expected_prev[3] !== 1'bx ) && ( generalans_prev[3] !== generalans_expected_prev[3] )
		&& ((generalans_expected_prev[3] !== last_generalans_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalans[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalans_expected_prev);
		$display ("     Real value = %b", generalans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_generalans_exp[3] = generalans_expected_prev[3];
	end
	if (
		( generalans_expected_prev[4] !== 1'bx ) && ( generalans_prev[4] !== generalans_expected_prev[4] )
		&& ((generalans_expected_prev[4] !== last_generalans_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalans[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalans_expected_prev);
		$display ("     Real value = %b", generalans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_generalans_exp[4] = generalans_expected_prev[4];
	end
	if (
		( generalans_expected_prev[5] !== 1'bx ) && ( generalans_prev[5] !== generalans_expected_prev[5] )
		&& ((generalans_expected_prev[5] !== last_generalans_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalans[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalans_expected_prev);
		$display ("     Real value = %b", generalans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_generalans_exp[5] = generalans_expected_prev[5];
	end
	if (
		( generalans_expected_prev[6] !== 1'bx ) && ( generalans_prev[6] !== generalans_expected_prev[6] )
		&& ((generalans_expected_prev[6] !== last_generalans_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalans[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalans_expected_prev);
		$display ("     Real value = %b", generalans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_generalans_exp[6] = generalans_expected_prev[6];
	end
	if (
		( generalans_expected_prev[7] !== 1'bx ) && ( generalans_prev[7] !== generalans_expected_prev[7] )
		&& ((generalans_expected_prev[7] !== last_generalans_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port generalans[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", generalans_expected_prev);
		$display ("     Real value = %b", generalans_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_generalans_exp[7] = generalans_expected_prev[7];
	end
	if (
		( signout_expected_prev !== 1'bx ) && ( signout_prev !== signout_expected_prev )
		&& ((signout_expected_prev !== last_signout_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port signout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", signout_expected_prev);
		$display ("     Real value = %b", signout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_signout_exp = signout_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module eda1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg clk;
reg [1:0] operator;
// wires                                               
wire [7:0] generalans;
wire [5:0] segout;
wire signout;
wire [6:0] wordout;

wire sampler;                             

// assign statements (if any)                          
eda1 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.clk(clk),
	.generalans(generalans),
	.operator(operator),
	.segout(segout),
	.signout(signout),
	.wordout(wordout)
);
// operator[ 1 ]
initial
begin
	operator[1] = 1'b1;
end 
// operator[ 0 ]
initial
begin
	operator[0] = 1'b0;
end 
// a[ 3 ]
initial
begin
	repeat(6)
	begin
		a[3] = 1'b0;
		a[3] = #80000 1'b1;
		# 80000;
	end
	a[3] = 1'b0;
end 
// a[ 2 ]
initial
begin
	repeat(12)
	begin
		a[2] = 1'b0;
		a[2] = #40000 1'b1;
		# 40000;
	end
	a[2] = 1'b0;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b0;
	a[1] = #20000 1'b1;
	#20000;
end 
// a[ 0 ]
always
begin
	a[0] = 1'b0;
	a[0] = #10000 1'b1;
	#10000;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
	b[2] = #640000 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
	b[1] = #320000 1'b1;
	b[1] = #320000 1'b0;
	b[1] = #320000 1'b1;
end 
// b[ 0 ]
initial
begin
	repeat(3)
	begin
		b[0] = 1'b0;
		b[0] = #160000 1'b1;
		# 160000;
	end
	b[0] = 1'b0;
end 

eda1_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.clk(clk),
	.operator(operator),
	.sampler_tx(sampler)
);

eda1_vlg_check_tst tb_out(
	.generalans(generalans),
	.segout(segout),
	.signout(signout),
	.wordout(wordout),
	.sampler_rx(sampler)
);
endmodule

